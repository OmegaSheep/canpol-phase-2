extends _layouts/base

block main
  .title
    h1=t("siteTitle")
  .max
    .centered
      .mp-container-thin
        .flex
          .img-container
            img.mp-img(src=`/images/mp_images/${image_name}` alt="")
          .txt-container
            .top-tile
              p.mp-name=name
              p(class=`mp-party ${party.toLowerCase().replace(" ", "-")}`)=party
            .bottom-tile
              p.mp-constituency=constituency
              p.mp-province=province
    .centered
      ul.ul
        li.landlord
          case landlord
            when "Y"
              = t("isALandlord", { name: name })
            when "N"
              = t("isNotKnownToBeALandlord", { name: name })
            when "UNDISCLOSED"
              = t("unsubmittedDisclosureProperty", { name: name })
            when "NOT SUBMITTED"
              = t("unsubmittedDisclosureProperty", { name: name })
            default
              | It is not presently known if #{name} is a Landlord.
        li.investor
          case investor
            when "Y"
              = t("hasInvestments", { name: name })
            when "N"
              = t("isNotKnownToHaveInvestments", { name: name })
            when "UNDISCLOSED"
              = t("unsubmittedDisclosureInvestments", { name: name })
            when "NOT SUBMITTED"
              = t("unsubmittedDisclosureInvestments", { name: name })
            default
              | It is not presently known if #{name} holds any investments.
    .centered
      .disclosure-container
        each contents, category in groupedDisclosures
          div
            p.category=category
            div
              each content in contents
                each line in content.split("\n")
                  p=line
    

    link(rel="stylesheet", href="https://cdnjs.cloudflare.com/ajax/libs/chartist/0.11.4/chartist.min.css")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/chartist/0.11.4/chartist.min.js")
    .centered 
    - if (expenseAverage && overallAverage)
      .expense-container
        h2.chart-title #{name} VS Average MP Contract Spending
        h3.chart-subtitle (April 1, 2024 - March 31, 2025)
        - let spendingCategory = '';
        - if (percentile <= 0.25) {
        -   spendingCategory = 'in the bottom 25% of MP Contract Spending';
        - } else if (percentile < 0.5) {
        -   spendingCategory = 'in the bottom 50% of MP Contract Spending';
        - } else if (percentile < 0.75) {
        -   spendingCategory = 'in the upper 50% of MP Contract Spending';
        - } else if (percentile < 0.9) {
        -   spendingCategory = 'in the upper 75% of MP Contract Spending';
        - } else {
        -   spendingCategory = 'in the upper 90% of MP Contract Spending';
        - }
        h3.chart-subtitle #{name} is #{spendingCategory}.
        #expense-chart4(style="height: 400px; width: 100%; max-width: 900px; margin: 0 auto;")

    script.
      document.addEventListener('DOMContentLoaded', function() {

        const labels = [`${!{JSON.stringify(name)}}`, 'Average MP Spending'];
        const series = [
          {
            value: !{JSON.stringify(expenseAverage)},
            meta: 'This MP'
          },
          {
            value: !{JSON.stringify(overallAverage)},
            meta: 'Average MP Spending'
          }
        ];

        new Chartist.Bar('#expense-chart4', {
          labels: labels,
          series: series
        }, {
          axisY: {
            labelInterpolationFnc: function(value) {
              return '$' + value.toLocaleString();
            }
          },
          axisX: {
            labelInterpolationFnc: function(value) {
              return value;
            }
          },
          distributeSeries: true,
          chartPadding: {
            right: 10,
            left: 30,
            bottom: 40,
          },
          plugins: []
        });
      });

    .centered 
    - if (expenseTypes && expenseTypes.length)
      .expense-container
        h2.chart-title Top 5 Contract Expense Categories by Total Spend
        h3.chart-subtitle (April 1, 2024 - March 31, 2025)
        #expense-chart(style="height: 400px; width: 100%; max-width: 900px; margin: auto;")

    script.
      document.addEventListener('DOMContentLoaded', function() {
        let expenseTypes = !{JSON.stringify(expenseTypes)};
        const total = expenseTypes.reduce((sum, e) => sum + e.total, 0);
        let top5 = expenseTypes
          .sort((a, b) => b.total - a.total)
          .slice(0, 5);
        const others = expenseTypes.slice(5);
        const otherTotal = others.reduce((sum, e) => sum + e.total, 0);
        if (otherTotal > 0) {
          top5.push({
            _id: 'Other',
            total: otherTotal
          });
        }
        expenseTypes = top5;

        const labels = expenseTypes.map(e => e._id);
        const series = expenseTypes.map(e => ({
          value: e.total,
          meta: e._id
        }));

        new Chartist.Pie('#expense-chart', {
          labels: labels,
          series: series,
        }, {
          chartPadding: 20,
          donut: true,
          donutWidth: 40,
          labelInterpolationFnc: function(value, index) {
            const amount = series[index]['value'];
            const percentage = ((amount / total) * 100).toFixed(1);
            
            return `$${amount.toLocaleString()} (${percentage}%)`;
          },
          plugins: [
          ]
        });
      });

    #chart-legend
    - if (expenseTypes && expenseTypes.length)
      - let i = 0;
      each expense in expenseTypes
        - if (++i <= 5)
          div
            strong #{i}. #{pieLegend[i-1]} #{expense._id}
            | : $#{expense.total.toLocaleString()}
      span ðŸŸ¢ <strong>All Other Expenses</strong>: $#{(expenseAverage - expenseTypes.slice(0, 5).reduce((sum, e) => sum + e.total, 0)).toLocaleString()}

    .centered
    - if (expenseSuppliers && expenseSuppliers.length)
      .expense-container
        h2.chart-title Top 5 Sources Paid by Total Spending
        h3.chart-subtitle (April 1, 2024 - March 31, 2025)
        #expense-chart2(style="height: 400px; width: 100%; max-width: 900px; margin: auto;")

    script.
      document.addEventListener('DOMContentLoaded', function() {
        let expenseSuppliers = !{JSON.stringify(expenseSuppliers)};
        expenseSuppliers = expenseSuppliers
          .sort((a, b) => b.totalSpent - a.totalSpent)
          .slice(0, 5);

        const labels = expenseSuppliers.map(e => e._id);
        const series = expenseSuppliers.map(e => ({
          value: e.totalSpent,
          meta: e._id
        }));

        new Chartist.Bar('#expense-chart2', {
          labels: labels,
          series: series
        }, {
          axisY: {
            labelInterpolationFnc: function(value) {
              return '$' + value.toLocaleString();
            }
          },
          axisX: {
            labelInterpolationFnc: function(value) {
              return value;
            }
          },
          distributeSeries: true,
          chartPadding: {
            right: 10,
            left: 20,
            bottom: 40,
          },
          plugins: []
        });
      });

    .centered 
    - if (topExpenses && topExpenses.length)
      .expense-container
        h2.chart-title Top 5 Largest Individual Line Items
        h3.chart-subtitle (April 1, 2024 - March 31, 2025)
        #expense-chart3(style="height: 400px; width: 100%; max-width: 900px; margin: 0 auto;")

    script.
      document.addEventListener('DOMContentLoaded', function() {
        let topExpenses = !{JSON.stringify(topExpenses)};

        const labels = topExpenses.map(e => `${e.description} (${e.supplier})`).reverse();
        const series = topExpenses.map(e => e.total).reverse();

        new Chartist.Bar('#expense-chart3', {
          labels: labels,
          series: series
        }, {
          horizontalBars: true,
          axisX: {
            labelInterpolationFnc: function(value, index) {
              return index % 2 === 0 ? '$' + value.toLocaleString() : null;
            }
          },
          axisY: {
            labelInterpolationFnc: function(value) {
              return value; // y-axis shows the labels
            }
          },
          distributeSeries: true,
          chartPadding: {
            right: 0,
            left: 70,   // May need extra space for long labels
            bottom: 20,
            top: 10
          },
          plugins: []
        });
      });